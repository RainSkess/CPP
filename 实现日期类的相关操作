

#include<iostream>

using namespace std;

class Date
{
	//设置为友元函数。
	//1. 没有this指针了，可以cout << d了，而不是 d << cout 了。
	//2. 可以访问私有成员
	friend ostream& operator<<(ostream& out, const Date& d);
	//流插入，对对象进行操作，所以不能加const
	friend istream& operator>>(istream& in, Date& d);
private:
	int _year;
	int _month;
	int _day;
public:
	//构造函数
	Date(int year = 1949, int month = 10, int day = 1)
	{
		if (month > 0 && month < 13
			&& day > 0 && day < GetMonthDay(year, month))
		{
			_year = year;
			_month = month;
			_day = day;
		}
	}

	//打印日期
	void Print()
	{
		cout << _year << "-" << _month << "-" << _day << endl;
	}

	//日期是否相等
	bool operator==(const Date& d) const;

	//日期是否更靠前
	bool operator<(const Date& d) const;

	//日期是否更靠前或者相同
	bool operator<=(const Date& d) const;

	//日期是否更靠后
	bool operator>(const Date& d) const;

	//日期是否更靠后或者相同
	bool operator>=(const Date& d) const;

	//日期是否不相同
	bool operator!=(const Date& d) const;

	//得到某个月的天数
	int GetMonthDay(int year, int month);

	//日期 += 天数
	Date& operator+=(int day);

	//日期 + 天数
	Date operator+(int day) const;

	//日期 -= 天数
	Date& operator-=(int day);

	//日期 - 天数
	Date operator-(int day) const;

	//日期 - 日期
	int operator-(const Date& d) const;

	//日期前置++
	Date& operator++();

	//日期后置++
	Date operator++(int);

	//日期前置--
	Date& operator--();

	//日期后置--
	Date operator--(int);

};

//构造函数
Date::Date(int year, int month, int day)
{
	_year = year;
	_month = month;
	_day = day;
}

//日期是否相等
bool Date::operator==(const Date& d) const
{
	return _year == d._year
		&& _month == d._month
		&& _day == d._day;
}

//日期是否更靠前
bool Date::operator<(const Date& d) const
{
	if (_year < d._year)
		return true;
	else if (_year < d._year &&_month < d._month)
		return true;
	else if (_year < d._year && _month < d._month && _day < d._day)
		return true;
	return false;
}

//日期是否更靠前或者相同
bool Date::operator<=(const Date& d) const
{
	return *this < d || *this == d;
}

//日期是否更靠后
bool Date::operator>(const Date& d) const
{
	return !(*this <= d);
}

//日期是否更靠后或者相同
bool Date::operator>=(const Date& d) const
{
	return !(*this < d);
}

//日期是否不相同
bool Date::operator!=(const Date& d) const
{
	return !(*this == d);
}

//得到某个月的天数
int Date::GetMonthDay(int year, int month)
{
	//定义为static，后面可能要多次调用开空间
	static int dayArr[13] = { 29, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };
	if (month == 2 && ((year % 4 == 0 && year % 100 != 0) || year % 400 == 0))
		return dayArr[0];
	return dayArr[month];
}

//日期 += 天数
Date& Date::operator+=(int day)
{
	if (day < 0)
	{
		return *this -= -day;
	}
	_day += day;
	while (_day > GetMonthDay(_year, _month))
	{
		_day -= GetMonthDay(_year, _month);
		++_month;
		if (_month == 13)
		{
			++_year;
			_month = 1;
		}
	}
	return *this;
}

//日期 + 天数
Date Date::operator+(int day) const
{
	Date tmp(*this);//拷贝构造函数
	tmp += day;
	return tmp;
}

//日期 -= 天数
Date& Date::operator-=(int day)
{
	if (day < 0)
	{
		return *this += -day;
	}
	_day -= day;
	while (_day <= 0)
	{
		_month -= 1;
		if (_month == 0)
		{
			_year -= 1;
			_month = 12;
		}
		_day += GetMonthDay(_year, _month);
	}
	return *this;
}

//日期 - 天数
Date Date::operator-(int day) const
{
	Date tmp(*this);
	tmp -= day;
	return tmp;
}

//日期 - 日期
int Date::operator-(const Date& d) const
{
	//找出靠后的日期
	Date max = *this;
	Date min = d;
	//flag作为一个标志
	int flag = 1;
	if (*this < d)
	{
		max = d;
		min = *this;
		flag = -1;
	}
	int days = 0;
	while (min != max)
	{
		++min;
		++days;
	}
	return flag * days;
}

//日期前置++
Date& Date::operator++()
{
	*this += 1;
	return *this;
}

//日期后置++
Date Date::operator++(int)
{
	Date tmp(*this);
	tmp += 1;
	return tmp;
}

//日期前置--
Date& Date::operator--()
{
	*this -= 1;
	return *this;
}

//日期后置--
Date Date::operator--(int)
{
	Date tmp(*this);
	tmp -= 1;
	return tmp;
}

ostream& operator<<(ostream& out, const Date& d)
{
	out << d._year << "-" << d._month << "-" << d._day;
	return out;
}

istream& operator>>(istream& in, Date& d)
{
	in >> d._year >> d._month >> d._day;
	return in;
}
